C51 COMPILER V8.02   NRF24L01P                                                             03/21/2013 13:42:37 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE NRF24L01P
OBJECT MODULE PLACED IN .\out\nrf24l01p.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\nrf24l01p.c ROM(SMALL) BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND PRINT
                    -(.\nrf24l01p.lst) OBJECT(.\out\nrf24l01p.obj)

line level    source

   1          /******************************************************************************/
   2          /*                        -- 深圳市安信可科技有限公司 --                      */
   3          /*
   4          //  文件名：                                              
   5          //  说明：                                                               
   6          //  编写人员：wuzhibiao                                                                   
   7          //  编写日期：2013年3月15日                                                               
   8          //  程序维护：
   9          //  维护记录：
  10          //
  11          //                                                          
  12          */ 
  13          // 免责声明：该程序仅用于学习与交流 
  14          // (c) Anxinke Corporation. All rights reserved.                                                          
             -     
  15          /******************************************************************************/
  16          #include "typedef.h"
  17          #include "gpio.h"
  18          #include "nrf24l01p.h"
  19          #include "delay.h"
  20          
  21          
  22          uchar const TX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x43,0x10,0x10,0x01}; // Define a static TX address
  23          uchar const RX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x43,0x10,0x10,0x01};
  24          uchar flag;
  25          
  26          /**************************************************/
  27          
  28          /**************************************************
  29          Function: init_io();
  30          Description:
  31            flash led one time,chip enable(ready to TX or RX Mode),
  32            Spi disable,Spi clock line init high
  33          /**************************************************/
  34          void init_nrf24l01_io(void)
  35          {
  36   1              CE=0;                   // chip enable
  37   1              CSN=1;                  // Spi disable  
  38   1              SCK=0;                  // Spi clock line init high
  39   1      }
  40          /**************************************************
  41          Function: SPI_RW();
  42          
  43          Description:
  44            Writes one byte to nRF24L01, and return the byte read
  45            from nRF24L01 during write, according to SPI protocol
  46          /**************************************************/
  47          uchar SPI_RW(uchar byte)
  48          {
  49   1              uchar bit_ctr;
  50   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++)   // output 8-bit
  51   1              {
  52   2                      MOSI = (byte & 0x80);         // output 'byte', MSB to MOSI
  53   2                      byte = (byte << 1);           // shift next bit into MSB..
C51 COMPILER V8.02   NRF24L01P                                                             03/21/2013 13:42:37 PAGE 2   

  54   2                      SCK = 1;                      // Set SCK high..
  55   2                      MISO=1;
  56   2                      byte |= MISO;                     // capture current MISO bit
  57   2                      SCK = 0;                          // ..then set SCK low again
  58   2              }
  59   1          return(byte);                         // return read byte
  60   1      }
  61          /**************************************************/
  62          
  63          /**************************************************
  64          Function: SPI_RW_Reg();
  65          
  66          Description:
  67            Writes value 'value' to register 'reg'
  68          /**************************************************/
  69          uchar SPI_RW_Reg(BYTE reg, BYTE value)
  70          {
  71   1              uchar status;
  72   1              CSN = 0;                   // CSN low, init SPI transaction
  73   1              status = SPI_RW(reg);      // select register
  74   1              SPI_RW(value);             // ..and write value to it..
  75   1              CSN = 1;                   // CSN high again
  76   1              return(status);            // return nRF24L01 status byte
  77   1      }
  78          /**************************************************/
  79          
  80          /**************************************************
  81          Function: SPI_Read();
  82          
  83          Description:
  84            Read one byte from nRF24L01 register, 'reg'
  85          /**************************************************/
  86          BYTE SPI_Read(BYTE reg)
  87          {
  88   1              BYTE reg_val;
  89   1              CSN = 0;                // CSN low, initialize SPI communication...
  90   1              SPI_RW(reg);            // Select register to read from..
  91   1              reg_val = SPI_RW(0);    // ..then read registervalue
  92   1              CSN = 1;                // CSN high, terminate SPI communication
  93   1              return(reg_val);        // return register value
  94   1      }
  95          /**************************************************/
  96          
  97          /**************************************************
  98          Function: SPI_Read_Buf();
  99          
 100          Description:
 101            Reads 'bytes' #of bytes from register 'reg'
 102            Typically used to read RX payload, Rx/Tx address
 103          /**************************************************/
 104          uchar SPI_Read_Buf(BYTE reg, BYTE *pBuf, BYTE bytes)
 105          {
 106   1              uchar status,byte_ctr;
 107   1      
 108   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 109   1              status = SPI_RW(reg);                   // Select register to write to and read status byte
 110   1      
 111   1              for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 112   1              pBuf[byte_ctr] = SPI_RW(0);    // Perform SPI_RW to read byte from nRF24L01
 113   1      
 114   1              CSN = 1;                           // Set CSN high again
 115   1      
C51 COMPILER V8.02   NRF24L01P                                                             03/21/2013 13:42:37 PAGE 3   

 116   1              return(status);                    // return nRF24L01 status byte
 117   1      }
 118          /**************************************************/
 119          
 120          /**************************************************
 121          Function: SPI_Write_Buf();
 122          
 123          Description:
 124            Writes contents of buffer '*pBuf' to nRF24L01
 125            Typically used to write TX payload, Rx/Tx address
 126          /**************************************************/
 127          uchar SPI_Write_Buf(BYTE reg, BYTE *pBuf, BYTE bytes)
 128          {
 129   1              uchar status,byte_ctr;
 130   1      
 131   1              CSN = 0;                   // Set CSN low, init SPI tranaction
 132   1              status = SPI_RW(reg);    // Select register to write to and read status byte
 133   1              for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // then write all byte in buffer(*pBuf)
 134   1              SPI_RW(*pBuf++);
 135   1              CSN = 1;                 // Set CSN high again
 136   1              return(status);          // return nRF24L01 status byte
 137   1      }
 138          /**************************************************/
 139          
 140          /**************************************************
 141          Function: RX_Mode();
 142          
 143          Description:
 144            This function initializes one nRF24L01 device to
 145            RX Mode, set RX address, writes RX payload width,
 146            select RF channel, datarate & LNA HCURR.
 147            After init, CE is toggled high, which means that
 148            this device is now ready to receive a datapacket.
 149          /**************************************************/
 150          void power_off()
 151          {
 152   1          CE=0;
 153   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0D); 
 154   1          CE=1;
 155   1          _delay_us(20);
 156   1      }
 157          /**************************************************/
 158          
 159          /**************************************************
 160          Function: TX_Mode();
 161          
 162          Description:
 163            This function initializes one nRF24L01 device to
 164            TX mode, set TX address, set RX address for auto.ack,
 165            fill TX payload, select RF channel, datarate & TX pwr.
 166            PWR_UP is set, CRC(2 bytes) is enabled, & PRIM:TX.
 167          
 168            ToDo: One high pulse(>10us) on CE will now send this
 169            packet and expext an acknowledgment from the RX device.
 170          /**************************************************/
 171          void receive_mode_init(void) 
 172          {
 173   1              CE=0;
 174   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, TX_ADR_WIDTH); // Use the same address on the RX devi
             -ce as the TX device
 175   1      
 176   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
C51 COMPILER V8.02   NRF24L01P                                                             03/21/2013 13:42:37 PAGE 4   

 177   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 178   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 179   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
 180   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x27);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 181   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:RX. RX_DR enabl
             -ed..
 182   1          SPI_RW_Reg(WRITE_REG+STATUS,0xff); // 清除所有中断标志
 183   1              CE = 1; // Set CE pin high to enable RX device 
 184   1      }
 185          
 186          void clearTXFIFO(void)
 187          {
 188   1          CSN = 0;
 189   1          SPI_RW(FLUSH_TX); 
 190   1          _delay_us(10);
 191   1          CSN = 1;
 192   1      }
 193          
 194          uchar send_data(uchar *buf)
 195          {
 196   1          unsigned int uiNum; 
 197   1          power_off();
 198   1              CE=0;
 199   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
 200   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ac
             -k
 201   1              SPI_Write_Buf(WR_TX_PLOAD, buf, TX_PLOAD_WIDTH); // Writes data to TX payload
 202   1      
 203   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 204   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 205   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
 206   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 207   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x27);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 208   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:TX. MAX_RT & TX
             -_DS enabled..
 209   1          IRQ = 1;
 210   1              CE=1;
 211   1          _delay_us(500);
 212   1          CE=0;
 213   1          
 214   1          uiNum = 0;
 215   1          while(IRQ == 1) {
 216   2              if (uiNum > 20000) {
 217   3                  uiNum = 0;
 218   3                  ifnnrf_CLERN_ALL();
 219   3                  return 0;
 220   3              } else {
 221   3                  uiNum++;
 222   3                  _delay_us(10);
 223   3              }
 224   2          }
 225   1          if (SPI_Read(STATUS) & STA_MARK_TX) {
 226   2              SPI_RW_Reg(WRITE_REG+STATUS,0xFF); // 清除所有中断标志
 227   2              clearTXFIFO();
 228   2              return 1;
 229   2          } else {
 230   2              SPI_RW_Reg(WRITE_REG+STATUS,0xFF); // 清除所有中断标志
 231   2              clearTXFIFO();
 232   2          }
 233   1          return 0;
 234   1      }
 235          
C51 COMPILER V8.02   NRF24L01P                                                             03/21/2013 13:42:37 PAGE 5   

 236          // 这个函数最好频繁调用  或者放在中断里
 237          uchar receive_data(uchar *buf)
 238          {
 239   1          uchar RXflag = 0;
 240   1          IRQ = 1;
 241   1          if (IRQ == 0) {
 242   2              if (SPI_Read(STATUS) & STA_MARK_RX) {
 243   3                  SPI_Read_Buf(RD_RX_PLOAD,buf,TX_PLOAD_WIDTH);
 244   3                  RXflag = 1;
 245   3                  SPI_RW_Reg(WRITE_REG+STATUS,0xff); // 清除所有中断标志
 246   3              } else {
 247   3                  ifnnrf_CLERN_ALL();
 248   3                  RXflag = 0;
 249   3              }
 250   2          }    
 251   1          return RXflag;  
 252   1      }
 253          
 254          void SPI_CLR_Reg(BYTE R_T)
 255          {
 256   1              CSN = 0; 
 257   1              if(R_T==1)                  // CSN low, init SPI transaction
 258   1              SPI_RW(FLUSH_TX);             // ..and write value to it..
 259   1              else
 260   1              SPI_RW(FLUSH_RX);             // ..and write value to it..
 261   1              CSN = 1;                   // CSN high again
 262   1      }
 263          
 264          void ifnnrf_CLERN_ALL()
 265          {
 266   1        SPI_CLR_Reg(0);
 267   1        SPI_CLR_Reg(1);
 268   1        SPI_RW_Reg(WRITE_REG+STATUS,0xff);
 269   1        IRQ=1;
 270   1      }
 271          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    478    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
